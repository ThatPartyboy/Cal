{"ast":null,"code":"import { clsx } from \"clsx\";\nconst falsyToString = value => typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config) => {\n  return props => {\n    var ref;\n    if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    const {\n      variants,\n      defaultVariants\n    } = config;\n    const getVariantClassNames = Object.keys(variants).map(variant => {\n      const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n      if (variantProp === null) return null;\n      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n      return variants[variant][variantKey];\n    });\n    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {\n      let [key, value] = param;\n      if (value === undefined) {\n        return acc;\n      }\n      acc[key] = value;\n      return acc;\n    }, {});\n    const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {\n      let {\n        class: cvClass,\n        className: cvClassName,\n        ...compoundVariantOptions\n      } = param1;\n      return Object.entries(compoundVariantOptions).every(param => {\n        let [key, value] = param;\n        return Array.isArray(value) ? value.includes({\n          ...defaultVariants,\n          ...propsWithoutUndefined\n        }[key]) : {\n          ...defaultVariants,\n          ...propsWithoutUndefined\n        }[key] === value;\n      }) ? [...acc, cvClass, cvClassName] : acc;\n    }, []);\n    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n  };\n};","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { clsx } from \"clsx\";\r\nconst falsyToString = (value)=>typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\r\nexport const cx = clsx;\r\nexport const cva = (base, config)=>{\r\n    return (props)=>{\r\n        var ref;\r\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\r\n        const { variants , defaultVariants  } = config;\r\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\r\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\r\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\r\n            if (variantProp === null) return null;\r\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\r\n            return variants[variant][variantKey];\r\n        });\r\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\r\n            let [key, value] = param;\r\n            if (value === undefined) {\r\n                return acc;\r\n            }\r\n            acc[key] = value;\r\n            return acc;\r\n        }, {});\r\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1)=>{\r\n            let { class: cvClass , className: cvClassName , ...compoundVariantOptions } = param1;\r\n            return Object.entries(compoundVariantOptions).every((param)=>{\r\n                let [key, value] = param;\r\n                return Array.isArray(value) ? value.includes({\r\n                    ...defaultVariants,\r\n                    ...propsWithoutUndefined\r\n                }[key]) : ({\r\n                    ...defaultVariants,\r\n                    ...propsWithoutUndefined\r\n                })[key] === value;\r\n            }) ? [\r\n                ...acc,\r\n                cvClass,\r\n                cvClassName\r\n            ] : acc;\r\n        }, []);\r\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\r\n    };\r\n};\r\n\r\n\r\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}